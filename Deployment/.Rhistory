ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
sentimentBigrams%>%
# filter(score!=0) %>%
group_by(Year,status) %>%
filter(status=='successful' | status=='failed') %>%
summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
sentimentBigrams%>%
filter(score!=0) %>%
group_by(Year,status) %>%
filter(status=='successful' | status=='failed') %>%
summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
ggplotly(sentimentBigrams%>%
filter(score!=0) %>%
group_by(Year) %>%
summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=Year, y = score)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)"))
sentimentBigrams%>%
filter(score!=0) %>%
group_by(Year,status) %>%
filter(status=='successful' | status=='failed') %>%
# summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
sentimentBigrams%>%
filter(score!=0) %>%
group_by(Year,status) %>%
filter(status=='failed') %>%
# summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
sentimentBigrams%>%
filter(score!=0) %>%
group_by(Year,status) %>%
filter(status=='failed' & year = 2009) %>%
# summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
sentimentBigrams%>%
filter(score!=0) %>%
group_by(Year,status) %>%
filter(status=='failed' & Year = 2009) %>%
# summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
sentimentBigrams%>%
filter(score!=0) %>%
group_by(Year,status) %>%
filter(status=='failed' & Year = "2009") %>%
# summarise(score = mean(score)) %>%
ggplot() + geom_line(mapping = aes(x=factor(Year), y = score, color=status)) +
ggtitle("Average Sentiment of English Bigrams (2009-2017)")
View(sentimentBigrams)
sentimentBigrams %>%
count(word1)
sentimentBigrams %>%
count(word1) %>%
mutate(contribution = n * score)
sentimentBigrams %>%
select(-id, -year, -category_name, -word2, -stem1, -stem2, -score2, -score)
sentimentBigrams <- sentimentBigrams %>%
select(-id, -Year, -category_name, -word2, -stem1, -stem2, -score2, -score)
load("D:/Coursework/R/shiny/.RData")
rm(g)
sentimentBigrams %>%
count(word1, score1, sort = TRUE) %>%
ungroup())
sentimentBigrams %>%
count(word1, score1, sort = TRUE) %>%
ungroup()
sentimentBigrams %>%
count(word1, score1, sort = TRUE) %>%
ungroup() %>%
arrange(desc(n)) %>%
mutate(word1 = reorder(word1, n))
sentimentBigrams %>%
count(word1, score1, Country, main_category, sort = TRUE)
sentimentBigrams %>%
count(word1, score1, country, main_category, sort = TRUE)
sentimentBigrams %>%
count(word1, score1, country, main_category, sort = TRUE) %>%
ungroup() %>%
arrange(desc(n)) %>%
mutate(word1 = reorder(word1, n)) %>%
mutate(contribution = n * score) %>%
arrange(desc(abs(contribution))) %>%
mutate(word1 = reorder(word1, contribution)) %>%
top_n(10, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0))
sentiments <- sentimentBigrams %>%
count(word1, score1, country, main_category, sort = TRUE) %>%
ungroup() %>%
arrange(desc(n)) %>%
mutate(word1 = reorder(word1, n)) %>%
mutate(contribution = n * score1) %>%
arrange(desc(abs(contribution))) %>%
mutate(word1 = reorder(word1, contribution))
View(sentiments)
sentiments %>%
top_n(10, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0))
sentiments %>%
top_n(10, wt=abs(contribution))
sentiments %>%
top_n(10, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE)
abs(contribution)
bottom_n
sentiments %>%
bottom_n(10, wt=abs(contribution))
sentiments %>%
top_n(-10, wt=abs(contribution))
sentiments %>%
top_n(-10)
sentiments %>%
top_n(-40, wt=abs(contribution))
sentiments %>%
filter(contribution != 0) %>%
top_n(-40, wt=abs(contribution)) %>%
sentiments %>%
filter(contribution != 0) %>%
top_n(-40, wt=abs(contribution))
sentiments %>%
filter(contribution != 0) %>%
top_n(-40, wt=abs(contribution))
sentiments %>%
filter(contribution != 0) %>%
top_n(40, wt=abs(contribution))
sentiments %>%
filter(contribution != 0) %>%
top_n(10, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_wrap(~main_category, scales="free")
sentiments %>%
filter(contribution != 0) %>%
top_n(10, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~main_category, scales="free")
sentiments %>%
filter(contribution != 0) %>%
top_n(40, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~main_category, scales="free")
sentiments %>%
filter(contribution != 0) %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~main_category, scales="free")
sentiments %>%
filter(contribution != 0) %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~main_category, scales="free") +
coord_flip()
ggplotly(sentiments %>%
filter(contribution != 0 & status == "successful") %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~main_category, scales="free") +
coord_flip())
View(sentimentBigrams)
sentiments <- sentimentBigrams %>%
count(word1, score1, country, main_category, status, sort = TRUE) %>%
ungroup() %>%
arrange(desc(n)) %>%
mutate(word1 = reorder(word1, n)) %>%
mutate(contribution = n * score1) %>%
arrange(desc(abs(contribution))) %>%
mutate(word1 = reorder(word1, contribution))
ggplotly(sentiments %>%
filter(contribution != 0 & status == "successful") %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~main_category, scales="free") +
coord_flip())
View(sentiments)
ggplotly(sentiments %>%
filter(contribution != 0 & status == input$radio1) %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~country, scales="free") +
coord_flip())
ggplotly(sentiments %>%
filter(contribution != 0 & status == "succesful") %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~country, scales="free") +
coord_flip())
ggplotly(sentiments %>%
filter(contribution != 0 & status == "succesful") %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~country, scales="free") +
coord_flip())
ggplotly(sentiments %>%
filter(contribution != 0 & status == "successful") %>%
top_n(100, wt=abs(contribution)) %>%
ggplot(aes(word1, contribution, fill = contribution > 0)) +
geom_col(show.legend = FALSE) +
facet_grid(~country, scales="free") +
coord_flip())
save.image("D:/Coursework/R/shiny/.RData")
View(ks)
ks$spotlight <- ks$spotlight[is.na(ks$spotlight)] <- FALSE
rm(data)
save.image("D:/Coursework/R/shiny/.RData")
View(ks)
train <- ks %>% dplyr::sample_frac(.75)
test  <- dplyr::anti_join(data, train, by = 'ID')
library(tidyverse)
test  <- dplyr::anti_join(data, train, by = 'ID')
test  <- anti_join(data, train, by = 'ID')
View(train)
train <- ks %>% sample_frac(.75)
test  <- anti_join(ks, train, by = 'ID')
testx <- test %>% select(-status)
testy <- test %>% select(status)
rm(test)
rf <- ranger(status ~ main_category + backers_count + goal + pledged + Month + Year + days_live, perc_funded
data = train,
write.forest = TRUE,
importance = "impurity")
library(ranger)
rf <- ranger(status ~ main_category + backers_count + goal + pledged + Month + Year + days_live, perc_funded,
data = train,
write.forest = TRUE,
importance = "impurity")
View(ks)
View(train)
rf <- ranger(status ~ main_category + backers_count + goal + pledged + Month + Year + days_live + perc_funded,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
runApp()
runApp()
runApp()
save.image("D:/Coursework/R/shiny/.RData")
runApp()
View(train)
train <- train %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
testx <- testx %>%
select(main_category, backers_count, country, goal, pledged, spotlight, Month, Year, days_live, perc_funded)
train <- train %>%
filter(status == "successful" | status == "failed")
testx <- testx %>%
filter(status == "successful" | status == "failed")
train <- ks %>% sample_frac(.75)
test  <- anti_join(ks, train, by = 'ID')
testx <- test %>% select(-status)
testy <- test %>% select(status)
train <- train %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
testx <- testx %>%
select(main_category, backers_count, country, goal, pledged, spotlight, Month, Year, days_live, perc_funded)
testx <- testx %>%
filter(status == "successful" | status == "failed")
train <- train %>%
filter(status == "successful" | status == "failed")
test <- test %>%
filter(status == "successful" | status == "failed")
testx <- test %>% select(-status)
testy <- test %>% select(status)
rm(test)
train <- ks %>% sample_frac(.75)
test  <- anti_join(ks, train, by = 'ID')
train <- train %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
test <- test %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
train <- train %>%
filter(status == "successful" | status == "failed")
test <- test %>%
filter(status == "successful" | status == "failed")
testx <- test %>% select(-status)
testy <- test %>% select(status)
rm(test)
View(train)
rf <- ranger(status ~ main_category + backers_count + spotlight + Month + Year + days_live + perc_funded,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
View(train)
save.image("D:/Coursework/R/shiny/.RData")
save.image("D:/Coursework/R/shiny/.RData")
runApp()
rf <- ranger(status ~ main_category + backers_count + goal + spotlight + Month + Year + days_live + perc_funded,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
train <- ks %>% sample_frac(.75)
test  <- anti_join(ks, train, by = 'ID')
train <- train %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
test <- test %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
train <- train %>%
filter(status == "successful" | status == "failed")
test <- test %>%
filter(status == "successful" | status == "failed")
testx <- test %>% select(-status)
testy <- test %>% select(status)
rm(test)
rf <- ranger(status ~ main_category + backers_count + goal + spotlight + Month + Year + days_live + perc_funded,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
train <- train %>%
filter(perc_funded<=1)
rf <- ranger(status ~ main_category + backers_count + goal + spotlight + Month + Year + days_live + perc_funded,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
rf <- ranger(status ~ main_category + backers_count + goal + spotlight + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
rf <- ranger(status ~ main_category + backers_count + goal + pledged + spotlight + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
save.image("D:/Coursework/R/shiny/.RData")
runApp()
runApp()
runApp()
rf <- ranger(status ~ main_category + backers_count + goal + perc_funded + spotlight + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
rf <- ranger(status ~ main_category + backers_count + spotlight + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
rf <- ranger(status ~ main_category + backers_count + pledged + spotlight + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
save.image("D:/Coursework/R/shiny/.RData")
runApp()
runApp()
rf <- ranger(status ~ main_category + backers_count + pledged + country + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
train <- ks %>% sample_frac(.75)
test  <- anti_join(ks, train, by = 'ID')
train <- train %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
test <- test %>%
select(main_category, backers_count, country, goal, pledged, spotlight, status, Month, Year, days_live, perc_funded)
train <- train %>%
filter(status == "successful" | status == "failed")
test <- test %>%
filter(status == "successful" | status == "failed")
testx <- test %>% select(-status)
testy <- test %>% select(status)
rm(test)
rf <- ranger(status ~ main_category + backers_count + pledged + spotlight + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
rf <- ranger(status ~ main_category + backers_count + spotlight + Month + Year + days_live,
data = train,
write.forest = TRUE,
importance = "impurity")
pred = predict(rf, testx)
pred = pred$predictions
accuracy = mean(pred == testy$status)
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
save.image("D:/Coursework/R/shiny/.RData")
runApp()
runApp()
runApp()
shiny::runApp()
library(plotly)
library(tidyverse)
library(tidytext)
library(ranger)
library(modelr)
library(wordcloud)
library(shiny)
runApp()
ggplotly(ks  %>%
filter(perc_funded < 3) %>%
ggplot() + geom_histogram(aes(perc_funded), bins =50)) +
ggtitle("Percentage Funded")
ggplotly(ks  %>%
filter(perc_funded < 3) %>%
ggplot() + geom_histogram(aes(perc_funded), bins =50) +
ggtitle("Percentage Funded"))
runApp()
runApp()
ggplotly(data.frame(as.list(rf$variable.importance)) %>% gather() %>%
ggplot(aes(x = reorder(key, value), y = value)) +
geom_bar(stat = "identity", width = 0.6, fill = "grey") +
coord_flip() +
theme_minimal() +
theme(axis.title.y = element_blank()) )
